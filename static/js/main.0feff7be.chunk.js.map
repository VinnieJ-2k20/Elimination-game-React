{"version":3,"sources":["components/Rules/Rules.jsx","components/GameParamForm/GameParamForm.jsx","components/Board/Board.jsx","App.js","index.js"],"names":["Rules","state","className","React","Component","GameParamForm","boxes","turn","playerStarts","handleChange","event","target","name","value","setState","handleSubmit","preventDefault","onStart","props","console","log","getTurnArray","minTurn","maxTurn","turnArray","i","push","this","minBoxes","maxBoxes","action","method","onSubmit","htmlFor","type","id","min","max","onChange","map","option","checked","Board","firstAvailable","playerTurn","componentDidMount","setTimeout","makeTurn","handleClick","box","board","maxTurnSize","onTurn","onGameEnd","turnValue","length","boxesLeft","perfectTurn","Math","floor","random","toValue","handleHoverEnter","classList","contains","document","querySelectorAll","forEach","siblingBox","textContent","add","handleHoverLeave","remove","minAvailable","maxAvailable","classNames","onClick","onMouseEnter","onMouseLeave","settings","App","areRulesVisible","areSettingsVisible","gameStarted","gameEnded","gameLog","toggleRules","getGameParams","writeInLog","entry","endGame","restart","Array","from","keys","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0feff7be.chunk.js","sourcesContent":["import React from 'react';\nimport './Rules.scss';\n\nexport class Rules extends React.Component {\n  state = {}\n\n  render() {\n\n    return (\n      <ul className=\"Rules\">\n        Here are the game rules:\n        <li>Game board consists of multiple numbered boxes</li>\n        <li>At the start of the game the Player selects total number of boxes and maximum amount that can be marked per turn</li>\n        <li>Player and Computer take turns crossing any number of boxes from 1 to max</li>\n        <li>The winning side is the one who crosses the last box</li>\n        <li>Good luck!</li>\n      </ul>\n    );\n  }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './GameParamForm.scss'\n\nexport class GameParamForm extends React.Component {\n  static propTypes = {\n    minBoxes: PropTypes.number.isRequired,\n    maxBoxes: PropTypes.number.isRequired,\n    minTurn: PropTypes.number.isRequired,\n    maxTurn: PropTypes.number.isRequired,\n    onStart: PropTypes.func.isRequired,\n  }\n\n  state = {\n    boxes: 25,\n    turn: 4,\n    playerStarts: true,\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    if (name === 'playerStarts') {\n      this.setState({\n        playerStarts: value === 'true',\n      })\n      return;\n    }\n\n    this.setState({\n      [name]: +value, \n    });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { onStart } = this.props;\n    const { boxes, turn, playerStarts } = this.state;\n    console.log(playerStarts);\n\n    onStart(boxes, turn, playerStarts);\n  }\n\n  getTurnArray = (minTurn, maxTurn) => {\n    const turnArray = []\n\n    for (let i = minTurn; i <= maxTurn; i++) {\n      turnArray.push(i);\n    }\n\n    return turnArray;\n  }\n\n  render() {\n    const { boxes, turn, playerStarts } = this.state;\n    const { minBoxes, maxBoxes, minTurn, maxTurn } = this.props;\n\n    return (\n      <form\n        className=\"GameParamForm\"\n        action=\"#\"\n        method=\"POST\"\n        onSubmit={this.handleSubmit}\n      >\n        {this.getTurnArray()}\n        <h2>Please, select new game parameters</h2>\n        <label htmlFor=\"boxes\">\n          Number of boxes:&nbsp;\n          <input\n            type=\"range\"\n            name=\"boxes\"\n            id=\"boxes\"\n            min={minBoxes}\n            max={maxBoxes}\n            value={boxes}\n            onChange={this.handleChange}\n          />\n          &nbsp;{boxes}\n        </label>\n        <br />\n\n        <label htmlFor=\"turn\">\n          Max boxes per turn:&nbsp;\n          <select\n            name=\"turn\"\n            id=\"turn\"\n            value={turn}\n            onChange={this.handleChange}\n          >\n            {this.getTurnArray(minTurn, maxTurn).map(option => (\n              <option value={option} key={option}>\n                {option}\n              </option>\n            ))}\n          </select>\n        </label>\n        <br />\n\n        <label htmlFor=\"playerStarts\">\n          Player starts\n          <input\n            type=\"radio\"\n            name=\"playerStarts\"\n            id=\"playerStarts\"\n            value=\"true\"\n            checked={playerStarts}\n            onChange={this.handleChange}\n          />\n        </label>\n        <label htmlFor=\"computerStarts\">\n          Computer starts\n          <input\n            type=\"radio\"\n            name=\"playerStarts\"\n            id=\"computerStarts\"\n            value=\"false\"\n            checked={!playerStarts}\n            onChange={this.handleChange}\n          />\n        </label>\n        <br />\n\n        <button\n          className=\"GameParamForm__start-button\"\n          type=\"submit\"\n        >\n          Start game\n        </button>\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport './Board.scss';\n\nexport class Board extends React.Component {\n  static propTypes = {\n    board: PropTypes.arrayOf(PropTypes.number).isRequired,\n    maxTurnSize: PropTypes.number.isRequired,\n    onTurn: PropTypes.func.isRequired,\n    onGameEnd: PropTypes.func.isRequired,\n    playerStarts: PropTypes.bool.isRequired,\n  }\n\n  state = {\n    firstAvailable: 1,\n    playerTurn: true,\n  }\n\n  componentDidMount = () => {\n    const { playerStarts } = this.props;\n    console.log(playerStarts);\n\n    this.setState({\n      playerTurn: playerStarts,\n    });\n\n    if (!playerStarts) {\n      setTimeout(() => {\n        this.makeTurn();\n      }, 2000);\n    }\n  }\n\n  handleClick = (box) => {\n    const { board, maxTurnSize, onTurn, onGameEnd } = this.props;\n    const { firstAvailable, playerTurn } = this.state;\n\n    if (!playerTurn) {\n      return;\n    }\n\n    const turnValue = box - firstAvailable + 2;\n    console.log(turnValue);\n\n    if (turnValue > maxTurnSize) {\n      return;\n    }\n\n    this.setState(state => ({\n      firstAvailable: state.firstAvailable + turnValue,\n      playerTurn: false,\n    }));\n\n    if (box + 1 === board.length) {\n      console.log('You Won!');\n      onTurn('You won! Congratulations!');\n      onGameEnd();\n      return;\n    }\n\n    const turn = `Player crossed ${turnValue} box(es)`;\n    const toValue = ` to total of ${firstAvailable + turnValue - 1}`;\n\n    onTurn(turn + toValue);\n\n    setTimeout(() => {\n      this.makeTurn();\n    }, 2000);\n  }\n\n  makeTurn = () => {\n    const { board, maxTurnSize, onTurn, onGameEnd } = this.props;\n    const { firstAvailable } = this.state;\n\n    const boxesLeft = board.length - firstAvailable + 1;\n    let turnValue;\n    console.log('boxes left: ', boxesLeft);\n    const perfectTurn = boxesLeft % (maxTurnSize + 1);\n    \n    if (boxesLeft <= maxTurnSize) {\n      turnValue = boxesLeft;\n    } else if (perfectTurn) {\n      turnValue = perfectTurn;\n    } else {\n      turnValue = Math.floor(Math.random() * (maxTurnSize + 1))\n    }\n\n    const turn = `Computer crossed ${turnValue} box(es)`;\n    const toValue = ` to total of ${firstAvailable + turnValue - 1}`;\n    const sorry = ' and won the game. Better luck next time!';\n\n    if (boxesLeft <= maxTurnSize) {\n      onTurn(turn + sorry);\n      onGameEnd();\n    } else {\n      onTurn(turn + toValue);\n    }\n\n    this.setState(state => ({\n      firstAvailable: state.firstAvailable + turnValue,\n      playerTurn: true,\n    }))\n  }\n\n  handleHoverEnter = (event, box) => {\n    if (!event.target.classList.contains('Board__box--available')) {\n      return;\n    }\n\n    const available = document.querySelectorAll('.Board__box--available');\n    available.forEach(siblingBox => {\n      if (+siblingBox.textContent <= box + 1) {\n        siblingBox.classList.add('Board__box--available-big');\n      }\n    })\n  }\n\n  handleHoverLeave = (event, box) => {\n    if (!event.target.classList.contains('Board__box--available')) {\n      return;\n    }\n\n    const available = document.querySelectorAll('.Board__box--available');\n    available.forEach(siblingBox => {\n      siblingBox.classList.remove('Board__box--available-big');\n    })\n  }\n\n  render() {\n    const { board, maxTurnSize } = this.props;\n    const { firstAvailable } = this.state;\n    const minAvailable = firstAvailable - 1;\n    const maxAvailable = firstAvailable - 1 + maxTurnSize;\n\n    return (\n      <section className=\"Board\">\n        {board.map(box => (\n          <div\n            className={classNames('Board__box', {\n              'Board__box--crossed': box < minAvailable,\n              'Board__box--available': (\n                box >= minAvailable && box < maxAvailable\n              ),\n              'Board__box--unavailable': box >= maxAvailable,\n              'Board__box--final': box === board.length - 1,\n            })}\n            key={box}\n            onClick={() => {\n              this.handleClick(box);\n            }}\n            onMouseEnter={(event) => {\n              this.handleHoverEnter(event, box);\n            }}\n            onMouseLeave={(event) => {\n              this.handleHoverLeave(event, box);\n            }}\n          >\n            {box + 1}\n          </div>\n        ))}\n      </section>\n    );\n  }\n}","import React from 'react';\nimport { Rules } from './components/Rules';\nimport { GameParamForm } from './components/GameParamForm';\nimport { Board } from './components/Board';\nimport './App.scss';\n\nconst settings = {\n  minBoxes: 20,\n  maxBoxes: 50,\n  minTurn: 3,\n  maxTurn: 6,\n}\n\nexport class App extends React.Component {\n  state = {\n    areRulesVisible: true,\n    areSettingsVisible: true,\n    gameStarted: false,\n    gameEnded: false,\n    playerStarts: true,\n    boxes: 0,\n    turn: 0,\n    gameLog: ['Game started!'],\n  }\n\n  toggleRules = () => {\n    this.setState(state => ({\n      areRulesVisible: !state.areRulesVisible,\n    }));\n  }\n\n  getGameParams = (boxes, turn, playerStarts) => {\n    this.setState({\n      boxes,\n      turn,\n      playerStarts,\n      areSettingsVisible: false,\n      gameStarted: true,\n    })\n  }\n\n  writeInLog = (entry) => {\n    this.setState(state => ({\n      gameLog: [\n        entry,\n        ...state.gameLog,\n      ],\n    }))\n  }\n\n  endGame = () => {\n    this.setState({\n      gameEnded: true,\n    })\n  }\n\n  restart = () => {\n    this.setState({\n      areSettingsVisible: true,\n      gameStarted: false,\n      gameEnded: false,\n      playerStarts: true,\n      boxes: 30,\n      turn: 4,\n      gameLog: ['Game started!'],\n    });\n  }\n\n  render() {\n    const {\n      areRulesVisible, areSettingsVisible, boxes, turn, gameStarted, gameLog, playerStarts, gameEnded,\n    } = this.state;\n\n    return (\n      <main className=\"App\">\n        <h1>Welcome to Elimination Game</h1>\n\n        <section className=\"App__rules\">\n          <button\n            className=\"App__start-button\"\n            type=\"button\"\n            onClick={this.toggleRules}\n          >\n            Hide/show rules\n          </button>\n          {areRulesVisible && (<Rules />)}\n        </section>\n\n        {areSettingsVisible && (\n          <GameParamForm\n            {...settings}\n            onStart={this.getGameParams}\n          />\n        )}\n\n        {gameStarted && (\n          <section className=\"App__message\">\n            {gameLog[gameLog.length - 1]}\n          </section>\n        )}\n\n        {gameEnded && (\n          <button\n            type=\"button\"\n            onClick={this.restart}\n          >\n            Choose different settings and restart\n          </button>\n        )}\n\n        {gameStarted && (\n          <Board\n            board={Array.from(Array(boxes).keys())}\n            maxTurnSize={turn}\n            onTurn={this.writeInLog}\n            playerStarts={playerStarts}\n            onGameEnd={this.endGame}\n          />\n        )}\n\n        {gameStarted && (\n          <section className=\"App__game-log\">\n            {gameLog.map(entry => (\n              <p key={entry}>{entry}</p>\n            ))}\n          </section>\n        )}\n      </main>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}